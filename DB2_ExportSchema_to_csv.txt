	#!/bin/ksh

#====================================================================================================================================
# This script exports data for the schema pased as parm2.
# The parameters required are 
# Parm1 Source DB name 
# Parm2 Schema to export
# Parm3 Number of rows per table to export
# 
#
# Run as Instance owner or DBADM
#====================================================================================================================================

function loadProfile {
  echo $0 :  "Num Parms : $#" : `date +%Y%m%d_%H%M%S`

  if [ ${#} -lt 2 ]
  then
    echo " ERROR : Not enough parameters, need at least 2"
    echo "Usage : $0 <DBNAME> <SCHEMA> <ROWS>"
    exit 1
  else
    echo Load DB2 Profile...
    . ~/sqllib/db2profile
    RETCODE=$?
    if [ "$RETCODE" -ne 0 ]; then
      echo "Could not load db2 profile"
      exit 1
    else 
      export DBNAME=`echo $1 |tr [A-Z] [a-z]`
      export TABSCHEMA=`echo $2 |tr [a-z] [A-Z]`   
      export ROWS_PER_TABLE=$3
    fi
  fi
}

function setParms {
  echo "Start function : $0 : `date +%Y%m%d_%H%M%S`"
  TITLE="DB2_EXPORT_SCHEMA"
  TMSTAMP=`date +%Y%m%d_%H%M`
  HOSTNAME=`hostname -s`
  HOSTNAME=`echo $HOSTNAME |tr [A-Z] [a-z]`
  ERR_FLAG="N"

  RELEASE_VERSION="export"_"$HOSTNAME"_"$DBNAME"_"$TABSCHEMA"_"$TMSTAMP"
 

  export RELEASE_VERSION=`echo ${RELEASE_VERSION} |tr [A-Z] [a-z]`

  #Paths
  EXPORT_PATH="/db2dba/scripts/RELEASES/"$RELEASE_VERSION"/data"                                 #Where data\exports are written to
                                                                    
  df    
}
 
function setupPaths {
  echo $0 : `date +%Y%m%d_%H%M%S`
  mkdir -p $EXPORT_PATH
  if [ "$?" -ne 0 ]
  then
    echo " ERROR : Can't create output path : $DATAPATH"                                                    
    exit 1
  fi
}

function DatabaseConnection {
  echo "Start function : $0 ( ${1} ) : `date +%Y%m%d_%H%M%S`"
  ACTION=$1
  case $ACTION in
  connect)    db2 -v connect to $DBNAME                                                                             
              RC=$?
              if [ "$RC" -ne 0 ]
              then
                  echo " ERROR : Can't connect to database : $DBNAME"                                            
              exit 2
              fi;;
  disconnect) db2 -v terminate;;
  *)          echo "invalid option";;
  esac   
}
 
function exportDataCSV {
  echo "Start function : $0  : `date +%Y%m%d_%H%M%S`"
  DatabaseConnection connect
  echo connected
    
  db2 -x "select tabname from syscat.tables where tabschema = '$TABSCHEMA'" |while read TABNAME 
  do 
    echo "Exporting table : $TABNAME"
    db2 -v "export to ${EXPORT_PATH}/${TABNAME}.tmp of del select * from ${TABSCHEMA}.${TABNAME} fetch first ${ROWS_PER_TABLE} rows only";  
    TABCOLUMNS=""

    db2 -x "select colname||',',colno from syscat.columns where tabschema = '${TABSCHEMA}' and tabname = '${TABNAME}' order by colno" |while read TABCOLUMN TABCOLNO DUMMY
    do
      TABCOLUMNS="${TABCOLUMNS} ${TABCOLUMN}"
    done
    echo "${TABCOLUMNS}" > "${EXPORT_PATH}"/"${TABNAME}".csv
    cat "${EXPORT_PATH}"/"${TABNAME}".tmp >> "${EXPORT_PATH}"/"${TABNAME}".csv
    cat "${EXPORT_PATH}"/"${TABNAME}".csv

    rm "${EXPORT_PATH}"/"${TABNAME}".tmp 
  done 
}

 

function createArchive {
  echo "Start function : $0 : `date +%Y%m%d_%H%M%S`"
  pwd
  cd $EXPORT_PATH
  cd ../../
  tar cvf ${RELEASE_VERSION}.tar ./${RELEASE_VERSION}
  RC=$?
  if [ "$RC" -gt 0 ]
    then
      echo "ERROR : creating archive "$RELEASE_VERSION".tar"                                                                                               
      exit 1
    else
      gzip -f $RELEASE_VERSION.tar
  fi
}


function listCurrentVars {
  #echo $0
  echo "#RELEASE VERSION      : ${RELEASE_VERSION}"
  echo "#SCHEMA               : ${SCHEMA}"
  echo "#DBNAME               : ${DBNAME}"
 
 
}
clear
echo running $0
loadProfile $1 $2 $3
listCurrentVars
setParms
setupPaths
exportDataCSV $SCHEMA
createArchive
date +%Y%m%d_%H%M%S
exit 0
