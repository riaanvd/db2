#!/bin/ksh
set +x
# This script deploys the DB2 database scripts for a release
# usage : DB2_ReleaseControl.sh <DBNAME> <VERSION>

clear

echo `date`

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Verify number of input parameters"
echo "#"
echo "#*******************************************************************************************"
echo ""

if [ $# -lt 2 ]
then
    echo "ERROR : Not enough parameters."
    echo "PARM1 = DBNAME"
    echo "PARM2 = RELEASE VERSION"
    exit 1
else
    echo "$# Parameters found"
    echo $1
    echo $2 
    DBNAME="$1"
    DBNAME=`echo $DBNAME | tr [A-Z] [a-z]`

    RELEASE_VERSION="$2"
    RELEASE_VERSION=`echo $RELEASE_VERSION | tr [A-Z] [a-z]`
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Load DB2 Profile..."
echo "#"
echo "#*******************************************************************************************"
echo ""

. ~/.profile
RETCODE=$?
if [ "$RETCODE" -ne 0 ]
then
    echo "ERROR : Could not load db2 profile"
    exit 1
else 
    echo "Loaded successful..."
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Initialize variables"
echo "#"
echo "#*******************************************************************************************"
echo ""

HOSTNAME=`hostname -s`
HOSTNAME=`echo $HOSTNAME | tr [A-Z] [a-z]`

DB2_INSTANCE=`echo "$DB2INSTANCE" |tr [A-Z] [a-z]`

OSTYPE=`uname`

TMSTAMP=`date +%Y%m%d_%H%M`

TITLE="DB2 Release Control : $HOSTNAME : $DBNAME : $RELEASE_VERSION"
SUBTITLE="Starting at `date`"

MAILTO_DBA="rvandeventer3@sars.gov.za"

ERR_FLAG=N
EXISTFLAG=0
SCRIPTCOUNT=0                                                                                 #Counter to keep track of progress
EXECORDERCOUNT=0                                                                              #Counter to keep track of progress
TOT_EXEC_TIME=0                                                                               #Counter to keep track of progress
let "SCRIPTCOUNT=$SCRIPTCOUNT+0"                                                              #Initialize Counter
let "EXECORDERCOUNT=$EXECORDERCOUNT+0"                                                        #Initialize Counter
let "TOT_EXEC_TIME=$TOT_EXEC_TIME+0"                                                          #Initialize Counter

DROP_ALL_INDICATOR="xxXX DROP ALL XXxx"                                                       #The string to search for in dbatb.releasecontrol 
                                                                                              # to identify when the db was last rebuilt

RELEASE_EXEDIR="/db2dba/scripts/RELEASES/"                                             #Base directory for all release archives
RELEASE_VERSION_DIR="$RELEASE_EXEDIR""$RELEASE_VERSION"/                                      #Parent directory for all scripts for this release
RELEASE_VERSION_LOGDIR="$RELEASE_EXEDIR""$RELEASE_VERSION"/                                   #Where all logs will be written 

SCRIPTLOG="$RELEASE_VERSION_LOGDIR"ReleaseControl_"$HOSTNAME"_"$DBNAME"_"$TMSTAMP".log                   #Name of log file 
SCRIPTOUT="$RELEASE_VERSION_LOGDIR"ReleaseControl_"$HOSTNAME"_"$DBNAME"_"$TMSTAMP".out                   #Temp out file to capture output of each script being run
SCRIPTREP="$RELEASE_VERSION_LOGDIR"ReleaseControl_"$HOSTNAME"_"$DBNAME"_"$TMSTAMP".rep                   #Name of SI report which shows durations of script execution 
MAIL_REP="$RELEASE_VERSION_LOGDIR"ReleaseControl_"$HOSTNAME"_"$DBNAME"_"$TMSTAMP".txt                    #Name of tmps file containing mail body for SI report 
GRANTOUT="$RELEASE_VERSION_LOGDIR"ReleaseControl_"$HOSTNAME"_"$DBNAME"_"$TMSTAMP".grant                  #Name of temp file used to perform db grants 

REL_MNGMNT_ARCHIVE="$RELEASE_VERSION_LOGDIR"DML_Archive_"$HOSTNAME"_"$DBNAME"_"$TMSTAMP".tar  #Name of archive (scripts and logs - destination Software library
REL_MNGMNT_MAILBODY_TMP="/tmp/db2.releasecontrol.tmp"

PROPERTIES_FILE="$RELEASE_VERSION_DIR""$HOSTNAME"."$DB2_INSTANCE"."$DBNAME".properties        #= ./<release path>/<hostname>.<db2instance>.<dbname>.properties
RERUN_MODE_FILE="$RELEASE_VERSION_DIR"release.rerun                                           #Sets the way scripts can be rerun.ie once only or once per release

echo "Done..."

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Read RELEASE VERSION properties file"
echo "#"
echo "#*******************************************************************************************"
echo ""

# The properties file gets generated by the verification tool, based on entries in the DBATB.RELEASECONTROL_DATABASES table
# The variables set when running this file are used during the execution of the release control script

# DB_HOST_DESCRIPTION = Used in MAILSUBJECT as description
# DBDIR               = To set the source subdirectory where scripts are read from
# MAILTO              = All mail recepients that should receive email
# APP_UID             = The application user id to grant SUDI to
# APP_RO_UID          = The read-only group to grant select to on all non-system tables
# PROD_FLAG           = Indicates that this is a production environment - for use by Release Management team
      

cd "$RELEASE_EXEDIR"

if [ -r ""$RELEASE_VERSION".tar.gz" ]
then
    echo "Running unzip"
    gunzip -f ""$RELEASE_VERSION".tar.gz"
    ls *.tar |tee -a $SCRIPTLOG
else
    echo "No zip found" |tee -a $SCRIPTLOG
fi

if [ -r ""$RELEASE_VERSION".tar" ]
then
    echo "NOT Running tar xvf"
    tar xvf ""$RELEASE_VERSION".tar" |tee -a $SCRIPTLOG
    chmod -R 772 ./"$RELEASE_VERSION" |tee -a $SCRIPTLOG
    mv ""$RELEASE_VERSION".tar" ""$RELEASE_VERSION".tar."$TMSTAMP""
else
    echo "No tar found" |tee -a $SCRIPTLOG
fi

if [ -r "$PROPERTIES_FILE" ]
then
    echo "Properties file : $PROPERTIES_FILE" 
    cat $PROPERTIES_FILE   |tee -a $SCRIPTLOG
    . $PROPERTIES_FILE
else
    echo "ERROR : Properties file not found" |tee -a $SCRIPTLOG
	echo "The properties file $PROPERTIES_FILE is generated as part of the verification process on DSRC" |tee -a $SCRIPTLOG
	echo "ERROR : Make sure the archive was copied to target DB host and extracted" |tee -a $SCRIPTLOG
	echo ""
    exit 1
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Initialize more variables, based on values in properties file"
echo "#"
echo "#*******************************************************************************************"
echo ""

MAILSUBJECT_PM="DB2 Release Control Report : $DB_HOST_DESCRIPTION : $DBNAME : $RELEASE_VERSION"
MAILSUBJECT_RELMNGMNT="DB2 Release Archive : $DB_HOST_DESCRIPTION : $DBNAME : $RELEASE_VERSION"

RELEASE_VERSION_DBDIR="$RELEASE_VERSION_DIR""$DBDIR"/                                         #Where scripts for specific database in this release are
RELEASE_DEPENDENCY_FILE="$RELEASE_VERSION_DBDIR"release.dependency                            #Lists Release Version(s) that must have run on target prior to this release

echo "Done..." 

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   List current variables"
echo "#"
echo "#*******************************************************************************************"
echo ""

if [ -s $SCRIPTLOG ]
then
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" |tee -a $SCRIPTLOG
    echo "+++++++++++++++++++++++++++++++++++++++++ RESTART ++++++++++++++++++++++++++++++++++++++++++" |tee -a $SCRIPTLOG
    echo "++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++" |tee -a $SCRIPTLOG
fi

echo "$TITLE"                                                                   |tee -a $SCRIPTLOG
echo "$SUBTITLE"                                                                |tee -a $SCRIPTLOG
echo "RELEASE_VERSION               : $RELEASE_VERSION"                         |tee -a $SCRIPTLOG
echo "HOSTNAME                      : $HOSTNAME"                                |tee -a $SCRIPTLOG
echo "DB2_INSTANCE                  : $DB2_INSTANCE"                            |tee -a $SCRIPTLOG
echo "DNAME                         : $DBNAME"                                  |tee -a $SCRIPTLOG
echo "APPNAME                       : $APP_NAME"                                |tee -a $SCRIPTLOG
echo "OSTYPE                        : $OSTYPE"                                  |tee -a $SCRIPTLOG
echo "SCRIPTLOG                     : $SCRIPTLOG"                               |tee -a $SCRIPTLOG
echo "MAILSUBJECT_PM                : $MAILSUBJECT_PM"                          |tee -a $SCRIPTLOG
echo "MAILSUBJECT_RELMNGMNT         : $MAILSUBJECT_RELMNGMNT"                   |tee -a $SCRIPTLOG
echo "RELEASE_EXEDIR                : $RELEASE_EXEDIR"                          |tee -a $SCRIPTLOG                                                      
echo "RELEASE_VERSION_DIR           : $RELEASE_VERSION_DIR"                     |tee -a $SCRIPTLOG
echo "RELEASE_VERSION_LOGDIR        : $RELEASE_VERSION_LOGDIR"                  |tee -a $SCRIPTLOG
echo "RELEASE_VERSION_DBDIR         : $RELEASE_VERSION_DBDIR"                   |tee -a $SCRIPTLOG
echo ""                                                                         |tee -a $SCRIPTLOG                
echo "SCRIPTOUT                     : $SCRIPTOUT"                               |tee -a $SCRIPTLOG
echo "SCRIPTREP                     : $SCRIPTREP"                               |tee -a $SCRIPTLOG
echo "GRANTOUT                      : $GRANTOUT"                                |tee -a $SCRIPTLOG
echo ""                                                                         |tee -a $SCRIPTLOG
echo "RELEASE_DEPENDENCY_FILE       : $RELEASE_DEPENDENCY_FILE"                 |tee -a $SCRIPTLOG                          
echo "RERUN_MODE_FILE               : $RERUN_MODE_FILE"                         |tee -a $SCRIPTLOG 
echo "PROPERTIES_FILE               : $PROPERTIES_FILE"                         |tee -a $SCRIPTLOG
echo ""                                                                         |tee -a $SCRIPTLOG
echo "Variables from parameter file"                                            |tee -a $SCRIPTLOG 
echo "-----------------------------"                                            |tee -a $SCRIPTLOG
echo "DB_HOST_DESCRIPTION           : $DB_HOST_DESCRIPTION"                     |tee -a $SCRIPTLOG
echo "DBDIR                         : $DBDIR"                                   |tee -a $SCRIPTLOG
echo "MAILTO                        : $MAILTO"                                  |tee -a $SCRIPTLOG
echo "MAILTO_DBA                    : $MAILTO_DBA"                              |tee -a $SCRIPTLOG
echo "MAILTO_CTM                    : $MAILTO_CTM"                              |tee -a $SCRIPTLOG
echo "MAILTO_USR                    : $MAILTO_USR"                              |tee -a $SCRIPTLOG
echo "MAILTO_DEV                    : $MAILTO_DEV"                              |tee -a $SCRIPTLOG
echo "MAILTO_EDW                    : $MAILTO_EDW"                              |tee -a $SCRIPTLOG
echo "APP_UID                       : $APP_UID"                                 |tee -a $SCRIPTLOG             
echo "APP_RO_UID                    : $APP_RO_UID"                              |tee -a $SCRIPTLOG
echo "PROD_FLAG                     : $PROD_FLAG"                               |tee -a $SCRIPTLOG


echo "" |tee -a $SCRIPTLOG
echo "#*******************************************************************************************" |tee -a $SCRIPTLOG
echo "#" |tee -a $SCRIPTLOG
echo "#   Re-Run Mode file : $RERUN_MODE_FILE" |tee -a $SCRIPTLOG
echo "#" |tee -a $SCRIPTLOG
echo "#*******************************************************************************************" |tee -a $SCRIPTLOG
echo "" |tee -a $SCRIPTLOG

echo "Valid options :" |tee -a $SCRIPTLOG
echo "" |tee -a $SCRIPTLOG
echo "FORCE   : Scripts will be rerun regardless." |tee -a $SCRIPTLOG
echo "ONCE    : Scripts will only be applied to database once, regardless of version it was first run as." |tee -a $SCRIPTLOG
echo "RELEASE : Scripts will only be applied to database once per release. (default)"  |tee -a $SCRIPTLOG
echo "" |tee -a $SCRIPTLOG

if  [ -r "$RERUN_MODE_FILE" ]            #File to indicate if a script should be skipped if it was 
                                         # applied to the database before or 
                                         # only if applied before as part of the same release version (default)
then
    cat "$RERUN_MODE_FILE" | read RERUN_MODE DUMMY
    RERUN_MODE=`echo $RERUN_MODE |tr [A-Z] [a-z]`

    case $RERUN_MODE in
  
         once|release|force) echo "RERUN MODE set to : $RERUN_MODE" |tee -a $SCRIPTLOG;; 

         *)                  RERUN_MODE="release"
                             echo "WARNING : invalid option in RERUN_MODE_FILE... applying default rules" |tee -a $SCRIPTLOG
                             echo "RERUN MODE set to : $RERUN_MODE" |tee -a $SCRIPTLOG;;
    esac
else
    echo "No rerun file found , applying default rules..." |tee -a $SCRIPTLOG
fi 

echo ""                      
echo "#*******************************************************************************************"
echo "#"
echo "#   Verify if Release scripts are on local host"
echo "#"
echo "#*******************************************************************************************"
echo ""

cd $RELEASE_VERSION_DBDIR
RETCODE=$?
if [ "$RETCODE" -ne 0 ]
then
    echo "Invalid release version for this target server : $HOSTNAME , $RELEASE_VERSION" |tee -a $SCRIPTLOG
    echo "Scripts directory could not be found : $RELEASE_VERSION_DBDIR" |tee -a $SCRIPTLOG
    exit 99
else
    ls -last *                                                          |tee -a $SCRIPTLOG 
fi
 
echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Log on to Target Database"
echo "#"
echo "#*******************************************************************************************"
echo ""

db2 -v activate database $DBNAME                                                |tee -a $SCRIPTLOG
db2 connect to $DBNAME                                                          >> $SCRIPTLOG
RETCODE=$?
if [ "$RETCODE" -ne 0 ]
then
    echo "ERROR : Cant connect to database : $DBNAME"                           |tee -a $SCRIPTLOG
    exit 2
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Read dependencies file : $RELEASE_DEPENDENCY_FILE"
echo "#"
echo "#*******************************************************************************************"
echo ""
  
if  [ -r "$RELEASE_DEPENDENCY_FILE" ]
then
    for DEPENDANT_RELEASE in `cat "$RELEASE_DEPENDENCY_FILE"`
    do 
      DEPENDANT_RELEASE=`echo $DEPENDANT_RELEASE |tr [A-Z] [a-z]` 
      db2 -x "SELECT COUNT(*) 
              FROM   DBATB.RELEASECONTROL 
              WHERE  STEP = 'END RELCTRL' 
                     AND RELEASE_VERSION = '"$DEPENDANT_RELEASE"'" |read DEPENDANTS_FOUND DUMMY
      if [ "$DEPENDANTS_FOUND" -eq 0 ]
      then                                                       
          echo "ERROR : This release is dependant on a release ( "$DEPENDANT_RELEASE" ) which has not been applied to database $DBNAME on host $HOSTNAME"
          cat $RELEASE_DEPENDENCY_FILE
          exit 1
      else
          echo "Release found      : $DEPENDANT_RELEASE"
      fi 
    done 
else                               
    echo "No dependency file found, assuming there are no dependencies..." |tee -a $SCRIPTLOG
fi 

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   0 : Database sanity check"
echo "#"
echo "#*******************************************************************************************"
echo ""    

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   If DBATB.RELEASECONTROL table does not exist , create one"
echo "#"
echo "#*******************************************************************************************"
echo ""
   
DB2_SQL_CHECK_RC_TBL="SELECT COUNT(*) 
                      FROM   SYSCAT.TABLES 
                      WHERE  TABNAME ='RELEASECONTROL' 
                             AND TABSCHEMA='DBATB'"
    
DB2_DDL_CRT_RC_TS1="call dbatb.create_data_ts('DBATBS_DATA')"
DB2_DDL_CRT_RC_TS2="call dbatb.create_IX_ts('DBATBS_IDX')"
DB2_DDL_CRT_RC_TBL="CREATE TABLE DBATB.RELEASECONTROL  (
                    DBNAME CHAR(8) NOT NULL ,
                    HOSTNAME VARCHAR(15) NOT NULL ,
                    RELEASE_VERSION VARCHAR(50) NOT NULL ,
                    STEP VARCHAR(20) ,
                    SCRIPTNAME VARCHAR(100) ,
                    SCRIPTDESCRIPTION VARCHAR(200) ,
                    STARTTIME TIMESTAMP ,
                    ENDTIME TIMESTAMP ,
                    EXECUTION_DURATION DECIMAL(10,3) ,
                    RETCODE CHAR(5) )
                    IN DBATBS_DATA INDEX IN DBATBS_IDX"

DB2_DDL_CRT_RC_IX="CREATE INDEX DBATB.RELEASECONTROL_IX1 ON DBATB.RELEASECONTROL
                   (RELEASE_VERSION ASC,
                    SCRIPTNAME ASC,
                    EXECUTION_DURATION ASC,
                    STARTTIME ASC)
                    COMPRESS NO ALLOW REVERSE SCANS"

db2 -x "$DB2_SQL_CHECK_RC_TBL" | read EXISTFLAG DUMMY      

if [ "$EXISTFLAG" -eq 0 ]
then
    echo "INFO : Creating DBATB.ReleaseControl table"                           |tee -a $SCRIPTLOG
    db2 -v "$DB2_DDL_CRT_RC_TS1"                                                |tee -a $SCRIPTLOG
    db2 -v "$DB2_DDL_CRT_RC_TS2"                                                |tee -a $SCRIPTLOG
    db2 -v "$DB2_DDL_CRT_RC_TBL"                                                |tee -a $SCRIPTLOG
    db2 -v "$DB2_DDL_CRT_RC_IX"                                                 |tee -a $SCRIPTLOG
else
    echo "INFO : DBATB.RELEASECONTROL already exists"                           |tee -a $SCRIPTLOG
    db2 -v "RUNSTATS ON TABLE DBATB.RELEASECONTROL"                             |tee -a $SCRIPTLOG 
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Check Last database rebuild"
echo "#"
echo "#*******************************************************************************************"
echo ""

DB2_SQL_LAST_DROPALL="SELECT MAX(STARTTIME) FROM DBATB.RELEASECONTROL WHERE SCRIPTDESCRIPTION LIKE '%"$DROP_ALL_INDICATOR"%'"

db2 -x $DB2_SQL_LAST_DROPALL |read LAST_DROPALL_TMSTAMP DUMMY
if [ "$LAST_DROPALL_TMSTAMP" = "-" -o "$LAST_DROPALL_TMSTAMP" = "" ]
then
    echo "Drop all has never been performed on this database"
    LAST_DROPALL_TMSTAMP="0001-01-01-00.00.00.000000"
    echo "LAST DROPALL set to : $LAST_DROPALL_TMSTAMP" |tee -a $SCRIPTLOG
else
    echo "Last drop all was performed on $LAST_DROPALL_TMSTAMP" |tee -a $SCRIPTLOG
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Log the start of the Release Control process"
echo "#"
echo "#*******************************************************************************************"
echo ""

DB2_SQL_INSERT="insert into dbatb.releasecontrol 
                (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,STARTTIME,RETCODE)
                values
                ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','START RELCTRL',current timestamp,'$RETCODE')" 

db2 -v $DB2_SQL_INSERT                                                          >> $SCRIPTLOG
RETCODE=$?
if [ "$RETCODE" -ne 0 ]
then
    echo "ERROR : Cant access table DBATB.RELEASECONTROL"                       |tee -a $SCRIPTLOG
    exit 2
else 
    db2 "SELECT DBNAME, HOSTNAME, RELEASE_VERSION,STEP, STARTTIME as START
         FROM   DBATB.RELEASECONTROL 
         WHERE  RELEASE_VERSION = '"$RELEASE_VERSION"' and STEP = 'START RELCTRL'" 

    echo "Multiple entries implies restarts..."                                 |tee -a $SCRIPTLOG
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Check last backup and number of connections"
echo "#"
echo "#*******************************************************************************************"
echo "" 

db2 -x "select 'INFO : LAST DB2 BACKUP : Started at '||TIMESTAMP_FORMAT(start_time,'YYYY-MM-DD HH24:MI:SS')
        ||', and took '||TIMESTAMPDIFF(4,CHAR(end_time - start_time))||' minutes to complete : '||comment
        from   sysibmadm.DB_HISTORY
        where  comment like '%BACKUP%' and start_time =
                                                       (select max(start_time)
                                                        from   sysibmadm.DB_HISTORY
                                                        where  comment like '%BACKUP%' and sqlcode is null)
        and location <> '/dev/null' fetch first row only with ur"               |tee -a $SCRIPTLOG

db2 -x list applications |wc -l |read CONNECTIONS                                                        #Determine the number of connections to the DB
echo "INFO : There are $CONNECTIONS connections to the database $DBNAME"        |tee -a $SCRIPTLOG        #Alert number of connections to the DB

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Check for active utilities"
echo "#"
echo "#*******************************************************************************************"
echo "" 
### Updated by Riaan : Stop release control if there are active utilities
db2 -x list utilities |wc -l |read ACTIVE_UTILS                                                        #Determine the number of active utilities
if [ "$ACTIVE_UTILS" -gt 1 ]
then
	db2 list utilities show detail                                                           |tee -a $SCRIPTLOG
	echo "ERROR : There are $ACTIVE_UTILS active utilities on the database : $DBNAME"        |tee -a $SCRIPTLOG        #STOP processing if active utilities found
    exit 1
fi
###

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Summary of script to process"
echo "#"
echo "#*******************************************************************************************"
echo ""

FILE_TO_PROCESS_EXEC=`ls *"execution_order"*.txt 2>/dev/null|wc -l`                                                #Show how many execution files to process
echo "Exec Orders to process : $FILE_TO_PROCESS_EXEC"                           |tee -a $SCRIPTLOG #How many Exec Order .txt files are there to process

FILE_TO_PROCESS_DDL=`ls *.ddl 2>/dev/null|wc -l`                                                                   #Show how many to process
echo "DDL Files to process   : $FILE_TO_PROCESS_DDL"                            |tee -a $SCRIPTLOG #How many .ddl files are there to process

FILE_TO_PROCESS_SQL=`ls *.sql 2>/dev/null|wc -l`                                                                   #Show how many to process
echo "SQL Files to process   : $FILE_TO_PROCESS_SQL"                            |tee -a $SCRIPTLOG #How many .sql files are there to process

(( TOT_SCRIPTCOUNT = FILE_TO_PROCESS_SQL + FILE_TO_PROCESS_DDL))                #===>> 

echo "Total files to process : $TOT_SCRIPTCOUNT"                                |tee -a $SCRIPTLOG #Total number of files to process

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   1 : For each Execution Order Process DDL & SQL Scripts by reading Execution Order line by line"
echo "#"
echo "#*******************************************************************************************"
echo "" 

### Updated by Riaan : list scripts already executed

echo "Scripts already executed in this release"                                 |tee -a $SCRIPTLOG
echo "========================================"                                 |tee -a $SCRIPTLOG
db2 "Select Starttime,scriptname 
     from dbatb.releasecontrol 
     where release_version = '"$RELEASE_VERSION"' and STEP like '%Apply Script' order by starttime" |tee -a $SCRIPTLOG


cd $RELEASE_VERSION_DBDIR
if [ "$ERR_FLAG" = "N" ]
then
    for EXEC_ORDER in `ls *"execution_order"*.txt |grep -i exec`                                 #List all exec order files and process 1 by 1
    do
      echo "Remove blank lines from Execution Order File: $EXEC_ORDER"          |tee -a $SCRIPTLOG
      cp $EXEC_ORDER "$EXEC_ORDER".orig
      sed 's/  *$//;/^$/d' "$EXEC_ORDER".orig > $EXEC_ORDER                                   # remove all blank lines from execution order file
      echo "Processing Scripts in Exec Order : $EXEC_ORDER at `date`"           |tee -a $SCRIPTLOG
      # Ignore blank lines and lines starting with a # or blanks and then a #
      cat "$EXEC_ORDER" | awk 'NF != 0 && $0 !~ "^[[:blank:]]*#" {print $0}' | while read FILENAME SCRIPT_DESCRIPTION
      do 
        #echo "Check if script was applied to database since last drop all"
        case $RERUN_MODE in

         once)             RERUN_SQL="WHERE  SCRIPTNAME = '"$FILENAME"' 
                                         AND STARTTIME > '"$LAST_DROPALL_TMSTAMP"' 
                                         AND NOT (SCRIPTNAME LIKE '%.rerun.sql' OR SCRIPTNAME LIKE '%.rerun.ddl') 
                                         AND RETCODE < 2";;

         release)          RERUN_SQL="WHERE  SCRIPTNAME = '"$FILENAME"' 
                                         AND STARTTIME > '"$LAST_DROPALL_TMSTAMP"' 
                                         AND NOT (SCRIPTNAME LIKE '%.rerun.sql' OR SCRIPTNAME LIKE '%.rerun.ddl') 
                                         AND RELEASE_VERSION = '"$RELEASE_VERSION"'
                                         AND RETCODE < 2";;

         force)            RERUN_SQL="WHERE 1=2";;

         *)                RERUN_SQL="WHERE  SCRIPTNAME = '"$FILENAME"' 
                                         AND STARTTIME > '"$LAST_DROPALL_TMSTAMP"' 
                                         AND NOT (SCRIPTNAME LIKE '%.rerun.sql' OR SCRIPTNAME LIKE '%.rerun.ddl') 
                                         AND RELEASE_VERSION = '"$RELEASE_VERSION"' 
                                         AND RETCODE < 2";; 
    
        esac

        DB2_SQL_COUNT_EXECUTIONS="SELECT COUNT(*) 
                                  FROM   DBATB.RELEASECONTROL 
                                  $RERUN_SQL"
 
        db2 -v $DB2_SQL_COUNT_EXECUTIONS |tee -a $SCRIPTLOG
        echo "Find script : $DB2_SQL_COUNT_EXECUTIONS" |tee -a $SCRIPTLOG

        db2 -x $DB2_SQL_COUNT_EXECUTIONS |read DB2_SQL_COUNT_EXECUTIONS DUMMY
        if [ "$DB2_SQL_COUNT_EXECUTIONS" -gt 0 ]
        then
            echo "=======================================================================================" |tee -a $SCRIPTLOG
            echo "This script ran successful before... Skipping!" |tee -a $SCRIPTLOG
			DB2_SQL_INSERT="insert into dbatb.releasecontrol
                                     (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,SCRIPTNAME,SCRIPTDESCRIPTION,STARTTIME,RETCODE)
                                     values
                                     ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','Skip Script','$FILENAME','Script was skipped, NOT applied to the database!!',current timestamp,'0')" 

            db2 -v $DB2_SQL_INSERT                                                                          |tee -a $SCRIPTLOG
            DB2_SQL_EXECUTION_DETAIL="SELECT SUBSTR(SCRIPTNAME,1,20) as SCRIPTNAME, '#'||SUBSTR(SCRIPTDESCRIPTION,1,50) as DESCRIPTION, 
                                             STARTTIME, EXECUTION_DURATION, RETCODE 
                                      FROM   DBATB.RELEASECONTROL 
                                      WHERE  SCRIPTNAME = '"$FILENAME"' and STARTTIME > '"$LAST_DROPALL_TMSTAMP"' 
                                             AND NOT (SCRIPTNAME LIKE '%.rerun.sql' OR SCRIPTNAME LIKE '%.rerun.ddl') "
            db2 -v "$DB2_SQL_EXECUTION_DETAIL"                                                             |tee -a $SCRIPTLOG
            echo "=======================================================================================" |tee -a $SCRIPTLOG
         else #EXECUTIONS = 0
             #SCRIPT_DESCRIPTION=$DUMMY
             SCRIPTCOUNT=`expr "$SCRIPTCOUNT" + 1`
             if [ -f $FILENAME ]
             then
                 echo "Processing  : $FILENAME ($SCRIPTCOUNT of $TOT_SCRIPTCOUNT)"   |tee -a $SCRIPTLOG
                 echo "Script Description : $SCRIPT_DESCRIPTION"                     |tee -a $SCRIPTLOG
                 
                 db2 -x "values (current_timestamp)" | read START_TIME
                 echo "$START_TIME"                                                  |tee -a $SCRIPTLOG       
                 SCRIPT_STIME=$SECONDS
				 ### Updated by Riaan 20131001 : change -stvf to -stvmf
                 db2 -stvmf $FILENAME                                                 > $SCRIPTOUT           #Execute the script via db2 client
                 RETCODE=$?
                 SCRIPT_ETIME=$SECONDS
                 ((SCRIPT_DURATION=SCRIPT_ETIME - SCRIPT_STIME))
                 echo "=======================================================================================" |tee -a $SCRIPTLOG
                 cat $SCRIPTOUT                                                      |tee -a $SCRIPTLOG
                 echo "=======================================================================================" |tee -a $SCRIPTLOG
                 if [ "$RETCODE" -lt 4 ]
                 then
                     cat $SCRIPTOUT |grep "DB21007E" |wc -l | read SQLCODE_CNT DUMMY
                     if [ "$SQLCODE_CNT" -gt 0 ]        # Cater for certain SQL Warning Messages (e.g.SQL0598W) which results in RC=2
                     then
                         RETCODE=$RETCODE
                     else  
                         RETCODE=1
                     fi #SQLCODE gt 0
                 fi #SQLCODE eq 2
                 if [ "$RETCODE" -gt 1 ]   # Cater for certain SQL Warning Messages (e.g.SQL0598W) which results in RC=2
                 then
                     ERR_FLAG=Y
                     echo "ERROR   : $FILENAME : returncode $RETCODE"      |tee -a $SCRIPTREP
                     db2 -x "values (current_timestamp)" | read END_TIME
                     DB2_SQL_INSERT="insert into dbatb.releasecontrol
                                     (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,SCRIPTNAME,SCRIPTDESCRIPTION,STARTTIME,ENDTIME,EXECUTION_DURATION,RETCODE)
                                     values
                                     ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','FAIL:Apply Script','$FILENAME','$SCRIPT_DESCRIPTION','$START_TIME','$END_TIME',$SCRIPT_DURATION,'$RETCODE')"
                     db2 -v $DB2_SQL_INSERT                                                                         >> $SCRIPTLOG 
                     break
                 else   
                     echo "End `date`"                                     |tee -a $SCRIPTLOG
                     db2 -x "values (current_timestamp)" | read END_TIME
                     echo "SUCCESS : $FILENAME : $SCRIPTCOUNT of $TOT_SCRIPTCOUNT ($SCRIPT_DURATION sec) : RC=$RETCODE"     |tee -a $SCRIPTLOG
                     DB2_SQL_INSERT="insert into dbatb.releasecontrol
                                     (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,SCRIPTNAME,SCRIPTDESCRIPTION,STARTTIME,ENDTIME,EXECUTION_DURATION,RETCODE)
                                     values
                                     ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','SUCCESS:Apply Script','$FILENAME','$SCRIPT_DESCRIPTION','$START_TIME','$END_TIME',$SCRIPT_DURATION,'$RETCODE')"
                     db2 -v $DB2_SQL_INSERT                                                                         >> $SCRIPTLOG
                 
                 fi #SQLCODE gt 1
             else  
                 ERR_FLAG=Y
                 echo "ERROR : Script $FILENAME not found in $RELEASE_VERSION_DBDIR. Stopping. Call DB2 DBA or VENDOR...."     |tee -a $SCRIPTLOG      #File not in DBDIR
                 break
             fi #-f $FILENAME
         fi #$DB2_SQL_COUNT_EXECUTIONS" -gt 0
       
      done                          #End of WHILE loop - Finished reading through one single exec order file
      if [ "$ERR_FLAG" = "N" ] 
      then 
          EXECORDERCOUNT=`expr "$EXECORDERCOUNT" + 1`
          echo "Finished Processing scripts in Exec Order : $EXEC_ORDER :: $EXECORDERCOUNT of $FILE_TO_PROCESS_EXEC"                   |tee -a $SCRIPTLOG
      else #if any error has occurred whilst executing a particular DDL/SQL script then stop all processing
      break
      fi #ERROR FOUND
    done #End of FOR Loop - Completed processing all exec order files
fi

echo ""
echo "#*******************************************************************************************"
echo "#"
echo "#   Grant database permissions on new objects"
echo "#"
echo "#*******************************************************************************************"
echo "" 

if [ "$ERR_FLAG" = "N" ]
then
    db2 connect to $DBNAME |tee -a $SCRIPTLOG
    RETCODE=$?
    if [ "$RETCODE" -ne 0 ]
    then
        echo "ERROR : Cant connect to database to grant permissions : $HOSTNAME, $DBNAME"                                             |tee -a $SCRIPTLOG
        exit 2
    fi

    DB2_SQL_INSERT="insert into dbatb.releasecontrol
                    (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,STARTTIME)
                    values
                    ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','START DB PERMISSIONS',current timestamp)"
 
    db2 -v $DB2_SQL_INSERT                                                          >> $SCRIPTLOG
 
    echo "-- `date`"                                                                 > $GRANTOUT
    echo "Grant permissions to APP UID : $APP_UID"                                        |tee -a $SCRIPTLOG

    echo "SUDI on non system tables..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT SELECT, INSERT, UPDATE, DELETE ON TABLE '||rtrim(TABSCHEMA)||'.'||rtrim(TABNAME)||' TO USER $APP_UID;' 
            FROM SYSCAT.TABLES 
            WHERE CREATE_TIME > CURRENT TIMESTAMP - 2 DAYS 
                  AND TABSCHEMA NOT LIKE 'SYS%' 
                  AND TABSCHEMA NOT LIKE 'SQL%' 
                  AND TABSCHEMA NOT LIKE 'REPL%' WITH UR"                                                                             >> $GRANTOUT 

    echo "Select on non sysdummy1..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT SELECT ON SYSIBM.SYSDUMMY1 TO USER $APP_UID;'
            FROM SYSIBM.SYSDUMMY1 WITH UR"                                                                                                         >> $GRANTOUT 

    echo "USE of user tablespace..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT USE OF TABLESPACE '||rtrim(TBSPACE)||' TO USER $APP_UID;'
            FROM SYSCAT.TABLESPACES 
            WHERE DATATYPE = 'U' WITH UR"                                                                                                        >> $GRANTOUT 

    echo "Use on non system sequences..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT USAGE on SEQUENCE '||rtrim(SEQSCHEMA)||'.'||rtrim(SEQNAME)||' TO USER $APP_UID;'
            FROM SYSCAT.SEQUENCES 
            WHERE SEQSCHEMA NOT LIKE 'SYS%' 
                  AND SEQTYPE = 'S' 
                  AND CREATE_TIME > CURRENT TIMESTAMP - 200 DAYS WITH UR"                                                             >> $GRANTOUT 

    echo "Execute on non system procedures..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT EXECUTE ON SPECIFIC PROCEDURE '|| RTRIM(PROCSCHEMA)||'.'||RTRIM(SPECIFICNAME)||' TO USER $APP_UID;'
            FROM SYSCAT.PROCEDURES 
            WHERE PROCSCHEMA NOT LIKE 'SYS%' 
                  AND PROCSCHEMA NOT LIKE 'SQL%' 
                  AND CREATE_TIME > CURRENT TIMESTAMP - 200 DAYS WITH UR"                                                             >> $GRANTOUT 

    echo "Execute on non system functions..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT EXECUTE ON FUNCTION '|| RTRIM(FUNCSCHEMA)||'.'||RTRIM(FUNCNAME)||' TO USER $APP_UID;'
            FROM SYSCAT.FUNCTIONS 
            WHERE FUNCSCHEMA  NOT LIKE 'SYS%' 
                  AND CREATE_TIME > CURRENT TIMESTAMP - 200 DAYS WITH UR"                                                             >> $GRANTOUT 

    echo ""                                       |tee -a $SCRIPTLOG

    echo "Grant permissions to READ ONLY GROUP : $APP_RO_UID"                                        |tee -a $SCRIPTLOG

    echo "Select on non system tables..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT SELECT ON TABLE '||rtrim(TABSCHEMA)||'.'||rtrim(TABNAME)||' TO GROUP $APP_RO_UID;' 
            FROM SYSCAT.TABLES 
            WHERE CREATE_TIME > CURRENT TIMESTAMP - 2 DAYS 
                  AND TABSCHEMA NOT LIKE 'SYS%' 
                  AND TABSCHEMA NOT LIKE 'SQL%' 
                  AND TABSCHEMA NOT LIKE 'REPL%' WITH UR"                                                                             >> $GRANTOUT 

    echo "Select on non sysdummy1..."                                                      |tee -a $SCRIPTLOG
    db2 -x "SELECT 'GRANT SELECT ON SYSIBM.SYSDUMMY1 TO GROUP $APP_RO_UID;'
            FROM SYSIBM.SYSDUMMY1 WITH UR"                                                                                                         >> $GRANTOUT 
	
    echo "Grant CONTROL on MTQ tables..."                                                      |tee -a $SCRIPTLOG

	db2 -x "SELECT 'GRANT CONTROL ON TABLE '||rtrim(TABSCHEMA)||'.'||rtrim(TABNAME)||' TO USER $APP_UID;'
            FROM SYSCAT.TABLES
            WHERE CREATE_TIME > CURRENT TIMESTAMP - 2 DAYS
                  AND TYPE = 'S'
                  AND TABSCHEMA NOT LIKE 'SYS%'
                  AND TABSCHEMA NOT LIKE 'SQL%'
                  AND TABSCHEMA NOT LIKE 'REPL%' WITH UR"                                              >> $GRANTOUT


    db2 -stvf $GRANTOUT                                                                                                               >> $SCRIPTLOG 
    RETCODE=$?
    DB2_SQL_INSERT="insert into dbatb.releasecontrol
                   (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,STARTTIME,RETCODE)
                   values
                   ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','END DB PERMISSIONS',current timestamp,'$RETCODE')"
    #echo $DB2_SQL_INSERT
    db2 -v $DB2_SQL_INSERT                                                          >> $SCRIPTLOG
                                                                   
    fi

if [ "$ERR_FLAG" = "Y" ]
then
    echo "$ERROR_MSG"                                                                                                         |tee -a $SCRIPTLOG #Notify OPS of error
    echo "Email ERROR to $MAILTO_DBA"                                                                                         |tee -a $SCRIPTLOG
    #uuencode "$SCRIPTLOG" RELEASE_"$RELEASE_VERSION"_"$HOSTNAME"_"$DBNAME".log |mail -s "ERROR : $TITLE" $MAILTO_DBA          #Mail log to DBA
    tail -30 "$SCRIPTLOG" | mail -s "ERROR : $TITLE" $MAILTO_DBA 
    exit 3
else
    echo ""
    echo "#*******************************************************************************************"
    echo "#"
    echo "#   Generate execution report"
    echo "#"
    echo "#*******************************************************************************************"
    echo ""

    DB2_SQL_REPORT="SELECT DATE(STARTTIME) AS DATE,substr(SCRIPTNAME,1,100) as SCRIPT_NAME,'#'||substr(SCRIPTDESCRIPTION,1,150) as DESCRIPTION,
                           TIME(STARTTIME) as time,EXECUTION_DURATION as duration,RETCODE           
                    from   dbatb.releasecontrol 
                    where  RELEASE_VERSION = '$RELEASE_VERSION' and STEP like '%Apply%'
                    order  by STARTTIME,DURATION DESC" 

    DB2_SQL_ENV="SELECT DISTINCT DBNAME, HOSTNAME,RELEASE_VERSION, DATE(STARTTIME) 
                 from   dbatb.releasecontrol
                 where  RELEASE_VERSION = '$RELEASE_VERSION' 
                        and date(starttime) = current date "

    DB2_SQL_REPORT_SUMMARY="SELECT DATE(STARTTIME) AS DATE ,COUNT(*) as SCRIPTS, 
                                   DECIMAL(MIN(EXECUTION_DURATION),7,2) as MIN, 
                                   DECIMAL(MAX(EXECUTION_DURATION),7,2) as MAX, 
                                   DECIMAL(AVG(EXECUTION_DURATION),7,2) as AVG,
                                   DECIMAL(SUM(EXECUTION_DURATION),7,2) as TOTAL
                            from   dbatb.releasecontrol
                            where  RELEASE_VERSION = '$RELEASE_VERSION' 
                                   and SCRIPTNAME is not null
                            group by DATE(STARTTIME)
                            order by 1"

    echo ""
    #db2 -v $DB2_SQL_ENV
    db2 -x $DB2_SQL_ENV | read REP_DBNAME REP_HOSTNAME REP_RELEASE_VERSION RELEASE_DATE DUMMY
    echo ""                                                                                            |tee $SCRIPTREP
    echo ""                                                                                            |tee -a $SCRIPTREP
    echo "HOSTNAME , $REP_HOSTNAME"                                                                    |tee -a $SCRIPTREP
    echo "DBNAME   , $REP_DBNAME"                                                                      |tee -a $SCRIPTREP
    echo "RELEASE  , $REP_RELEASE_VERSION"                                                             |tee -a $SCRIPTREP
    echo "DATE     , $RELEASE_DATE"                                                                    |tee -a $SCRIPTREP
    echo ""                                                                                            |tee -a $SCRIPTREP
    echo "Report Detail"                                                                               |tee -a $SCRIPTREP
    echo ""                                                                                            |tee -a $SCRIPTREP
    ### Updated by Riaan 20131001 : modify report to cater for csv
	#db2 $DB2_SQL_REPORT                                                                                |tee -a $SCRIPTREP
    db2 "export to /tmp/DB2_"$REP_RELEASE_VERSION"_1.csv of del messages ./report_export.msg $DB2_SQL_REPORT"
    echo "Execution Date,Script Name,Description,Time,Duration,Returncode"                             |tee -a $SCRIPTREP  
	cat /tmp/DB2_"$REP_RELEASE_VERSION"_1.csv                                                          |tee -a $SCRIPTREP
	###
	echo ""                                                                                            |tee -a $SCRIPTREP
    echo "Report Summary (seconds)"                                                                    |tee -a $SCRIPTREP
    echo ""                                                                                            |tee -a $SCRIPTREP
    ### Updated by Riaan 20131002 modify report to cater for csv
    #db2 $DB2_SQL_REPORT_SUMMARY                                                                        |tee -a $SCRIPTREP
    db2 "export to /tmp/DB2_"$REP_RELEASE_VERSION"_2.csv of del messages ./report_export2.msg $DB2_SQL_REPORT_SUMMARY"
    echo "Execution Date,Number of scripts,Minumum (sec),Maximum (sec),Average (sec),Total (sec)"      |tee -a $SCRIPTREP  
	cat /tmp/DB2_"$REP_RELEASE_VERSION"_2.csv                                                          |tee -a $SCRIPTREP
	rm -f /tmp/DB2_"$REP_RELEASE_VERSION"_*.csv
    ###
    echo ""                                                                                            |tee -a $SCRIPTREP

	echo "This is an automated response, please do not reply to this mail."                             >  $MAIL_REP
	echo ""                                                                                             >> $MAIL_REP
	echo "The attached report list the scripts that have been applied to the target database"           >> $MAIL_REP
	echo "Open the attached file with EXCEL"                                                            >> $MAIL_REP
    echo ""                                                                                             >> $MAIL_REP
	echo "For further information contact the DB2 DBAs or send mail to DB2DBA@sars.gov.za"              >> $MAIL_REP
	echo ""                                                                                             >> $MAIL_REP
	echo "============================================================================================" >> $MAIL_REP
	echo ""                                                                                             >> $MAIL_REP


    echo "Email Report to $MAILTO,$MAILTO_DBA"                                                         |tee -a $SCRIPTLOG
    echo "Report : $SCRIPTREP"                                                                         |tee -a $SCRIPTLOG
     
    if [ "$OSTYPE" = "AIX" ]
	then
    	#uuencode "$SCRIPTREP" "$REP_RELEASE_VERSION".rep | mail -s "$MAILSUBJECT_PM" $MAILTO,$MAILTO_DBA
		### changed by Riaan 20131001 changed file extention to csv
		#(cat "$MAIL_REP" ; uuencode "$SCRIPTREP" "$REP_RELEASE_VERSION".rep) | mail -s "$MAILSUBJECT_PM" $MAILTO,$MAILTO_DBA
		(cat "$MAIL_REP" ; uuencode "$SCRIPTREP" "$REP_RELEASE_VERSION".csv) | mail -s "$MAILSUBJECT_PM" $MAILTO,$MAILTO_DBA
    else    
		cat "$MAIL_REP" | mail -a "$SCRIPTREP" -s "$MAILSUBJECT_PM" $MAILTO,$MAILTO_DBA
		### changed by Riaan 20131001 changed file extention to csv
		#(cat "$MAIL_REP" ; uuencode "$SCRIPTREP" "$REP_RELEASE_VERSION".rep) | mail -s "$MAILSUBJECT_PM" rvandeventer3@sars.gov.za
		(cat "$MAIL_REP" ; uuencode "$SCRIPTREP" "$REP_RELEASE_VERSION".csv) | mail -s "$MAILSUBJECT_PM" rvandeventer3@sars.gov.za
    fi
	
    if [ "$PROD_FLAG" = "Y" ]
    then
        echo ""
        echo "#*******************************************************************************************"
        echo "#"
        echo "#   Create 1 archive of all scripts and logs, then notify Release Management (PRD env only)"
        echo "#"
        echo "#*******************************************************************************************"
        echo ""
    
        DB2_SQL_INSERT="insert into dbatb.releasecontrol
                        (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,STARTTIME)
                        values
                        ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','START DMLPACKAGE',current timestamp)"
    
        db2 -v $DB2_SQL_INSERT                                                                                                        |tee -a $SCRIPTLOG
        echo "Creating archive for Release Management : $REL_MNGMNT_ARCHIVE"                                                          |tee -a $SCRIPTLOG
        cd $RELEASE_VERSION_DIR
        echo `pwd`                                                                                                                    |tee -a $SCRIPTLOG
        tar cvf $REL_MNGMNT_ARCHIVE .                                                                                                 |tee -a $SCRIPTLOG
        echo "This mail was generated automatically by the DB2 Release control process. \n"                                           |tee $REL_MNGMNT_MAILBODY_TMP
        echo "An Archive of all DB2 script has been prepared for the Software library. \n"                                            |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo "Database name   : $DBNAME \n"                                                                                           |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo "Archive source  : $HOSTNAME:$REL_MNGMNT_ARCHIVE \n"                                                                     |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo "Archive target  : '\\\\ptabrfap01\SIReleaseMngtProjDoc' \n"                                                             |tee -a $REL_MNGMNT_MAILBODY_TMP 
        echo ""                                                                                                                       |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo "For further assistance, contact the DB2DBAs at DB2DBA@sars.gov.za"                                                      |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo ""                                                                                                                       |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo "Archive contents \n"                                                                                                    |tee -a $REL_MNGMNT_MAILBODY_TMP
        echo "================"                                                                                                       |tee -a $REL_MNGMNT_MAILBODY_TMP
        tar tvf $REL_MNGMNT_ARCHIVE                                                                                                   |tee -a $REL_MNGMNT_MAILBODY_TMP
  
        echo "Email notice re Archive to $MAILTO_RELMNGMNT"                                                                           |tee -a $SCRIPTLOG 
        echo "DML Archive file : $REL_MNGMNT_MAILBODY_TMP"                                                                            |tee -a $SCRIPTLOG 

        #mail -s "$MAILSUBJECT_RELMNGMNT" $MAILTO_RELMNGMNT < $REL_MNGMNT_MAILBODY_TMP
        mail -s "$MAILSUBJECT_RELMNGMNT" rvandeventer3@sars.gov.za < $REL_MNGMNT_MAILBODY_TMP
        DB2_SQL_INSERT="insert into dbatb.releasecontrol
                       (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,STARTTIME)
                       values
                       ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','END DMLPACKAGE',current timestamp)"
        #echo $DB2_SQL_INSERT
        db2 -v $DB2_SQL_INSERT                                                                                                        |tee -a $SCRIPTLOG

        echo ""
        echo "#*******************************************************************************************"
        echo "#"
        echo "#   Notify EDW Team of changes that might impact warehouse extracts"
        echo "#"
        echo "#*******************************************************************************************"
        echo ""

        if [ "$MAILTO_EDW" != "" ]
        then 
            echo "Email Report to $MAILRO_EDW"
            echo "Report : $SCRIPTREP"                                                                                                |tee -a $SCRIPTLOG
            #mail -s "$MAILSUBJECT_PM" $MAILTO_EDW,rvandeventer3@sars.gov.za < $SCRIPTREP
        fi
 
    fi #if PROD_FLAG=Y

    echo ""
    echo "#*******************************************************************************************"
    echo "#"
    echo "#   Mail the logfile to the DBAs "
    echo "#"
    echo "#*******************************************************************************************"
    echo ""

    echo "Email Log to $MAILTO_DBA"                                                                                                                  |tee -a $SCRIPTLOG
    echo "Log : "$SCRIPTLOG""  

    #uuencode "$SCRIPTLOG" RELEASE_"$RELEASE_VERSION"_"$HOSTNAME"_"$DBNAME".log |mail -s "SUCCESS : $TITLE" $MAILTO_DBA               #Mail log to DBA
    mail -s "SUCCESS : $TITLE" $MAILTO_DBA  < "$SCRIPTLOG"                                                                            #Mail log to DBA

    echo ""
    echo "#*******************************************************************************************"
    echo "#"
    echo "#   Update DBATB.RELEASECONTROL to show all scripts for release ran successfull"
    echo "#"
    echo "#*******************************************************************************************"
    echo ""

    DB2_SQL_INSERT="insert into dbatb.releasecontrol
                    (DBNAME,HOSTNAME,RELEASE_VERSION,STEP,STARTTIME,RETCODE)
                    values
                    ('$DBNAME','$HOSTNAME','$RELEASE_VERSION','END RELCTRL',current timestamp,'0')"
    #echo $DB2_SQL_INSERT
    db2 -v $DB2_SQL_INSERT                                                                                                            |tee -a $SCRIPTLOG
    ### Updated by Riaan 20131001 : remove deactivate
	#db2 -v deactivate database $DBNAME                                                                                                |tee -a $SCRIPTLOG
    ###
    db2 connect reset
    echo "End : `date`"
    exit 0
fi #if no errors
 
